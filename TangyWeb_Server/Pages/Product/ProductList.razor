@page "/product"
@inject IProductRepository _productRepository
@inject IJSRuntime _JSRuntime
@inject IFileUpload _fileUpload

<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"
    IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>

<div class="row mt-4 my-2">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add New Product</a>
    </div>
</div>
<div class="col-12">
    @if (Products.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Shop Favourites</th>
                    <th>Customer Favourites</th>
                    <th>Category</th>
                    
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var prod in Products)
                {
                    <tr>
                        <td>@prod.Name</td>
                        <td><input type="checkbox" disabled checked="@prod.ShopFavourite" /></td>
                        <td><input type="checkbox" disabled checked="@prod.CustomerFavourite" /></td>
                        <td>@prod.Category.Name</td>
                        <td>
                            <NavLink href="@($"product/edit/{prod.Id}")" class="btn btn-primary">Edit</NavLink>
                            <NavLink href="@($"product/price/{prod.Id}")" class="btn btn-success">Price</NavLink>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(prod.Id)">Delete</button>
                        </td>
                        
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <p>No records found..</p>
        }
    }
</div>

@code {
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsLoading { get; set; }
    public int DeleteProductId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
        }

    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _JSRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {


        IsLoading = true;
        if (isConfirmed && DeleteProductId != 0)
        {
            ProductDTO product = await _productRepository.Get(DeleteProductId);
            if (!product.ImageUrl.Contains("default.png"))
            {
                _fileUpload.DeleteFile(product.ImageUrl);
            }
            await Task.Delay(5000);
            await _productRepository.Delete(DeleteProductId);
            await _JSRuntime.ToastrSuccess("Product Deleted Successfully");
            await LoadProducts();
            await _JSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
