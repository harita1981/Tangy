@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _JSRuntime

<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"
    IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>

<div class="row mt-4 my-2">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category</a>
    </div>
</div>
<div class="col-12">
    @if (Categories.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var obj in Categories)
                {
                    <tr>
                        <td>@obj.Name</td>
                        <td><NavLink href="@($"category/edit/{obj.Id}")" class="btn btn-primary">Edit</NavLink>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(obj.Id)">Delete</button>
                        </td>
                        
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <p>No records found..</p>
        }
    }
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    public bool IsLoading { get; set; }
    public int DeleteCategoryId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }

    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _JSRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {

        
        IsLoading = true;
        if(isConfirmed && DeleteCategoryId != 0)
        {
            await Task.Delay(5000);
            await _categoryRepository.Delete(DeleteCategoryId);
            await LoadCategories();
            await _JSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
